<div id="boundaries_acl">
  {#case e(@type, nil)}
    {#match :group}
      <section class="bg-base-content/5 rounded-lg p-4">
        <Bonfire.UI.Boundaries.EditAclLive
          feed_by_subject={@feed_by_subject}
          setting_boundaries={@setting_boundaries}
          scope={@scope}
          usage={@usage}
          read_only={@read_only}
          myself={@myself}
        />
      </section>
    {#match nil}
      <div>
        <div
          :if={!@setting_boundaries && (e(@description, nil) || e(@acl, :extra_info, :summary, nil))}
          class="p-4 border-b border-base-content/10"
        >
          <span class="text-base-content/70">
            {e(@description, nil) || e(@acl, :extra_info, :summary, "No description provided for this boundary preset.")}
          </span>
        </div>
        <div class="">
          {#if @section == "new_circle"}
            <Bonfire.UI.Boundaries.NewCircleLive
              parent_back={@myself}
              event_target={@myself}
              setting_boundaries={@setting_boundaries}
            />
          {#elseif @edit_circle_id}
            <Bonfire.UI.Boundaries.CircleMembersLive
              id={@edit_circle_id}
              circle_id={@edit_circle_id}
              parent_back={@myself}
              setting_boundaries={@setting_boundaries}
            />
          {#else}
            <div class="p-6 w-full border-base-content/10 border-b" :if={!@read_only}>
              <div class="text-xs text-left uppercase mb-4 text-base-content/80 font-semibold">{l("Your circles")}</div>
              <form
                id="edit_acl_members"
                class="flex items-center gap-2 w-full flex-1 flex-wrap"
                phx-change="multi_select"
              >
                <button
                  disabled={Enum.any?(@feed_by_subject, fn {id, _} -> id == elem(circle, 1)[:id] end)}
                  class="btn btn-sm btn-soft btn-primary rounded-full"
                  :for={circle <- @my_circles}
                  type="button"
                  data-role="add-circle-to-acl"
                  phx-target={@myself}
                  phx-click="add_to_acl"
                  phx-value-id={elem(circle, 1)[:id]}
                  phx-value-name={elem(circle, 1)[:name]}
                >
                  {elem(circle, 1)[:name]}
                </button>
              </form>
              {#if !@setting_boundaries and !@read_only and !Acls.is_object_custom?(@acl)}
              {/if}
            </div>

            <div date-role="edit-acl">
              <div class="">
                {#if is_list(@feed_by_subject) or (is_map(@feed_by_subject) and not Enum.empty?(@feed_by_subject))}
                  <ul class="list">
                    <li
                      :for={{{subject_id, %{subject: subject, grants: grants} = _subject_verb_grants}, _i} <-
                        Enum.with_index(@feed_by_subject || [])}
                      class="list-row"
                    >
                      {#if e(subject, :profile, :id, nil)}
                        <StatelessComponent
                          module={maybe_component(Bonfire.UI.Me.ProfileItemLive)}
                          profile={e(subject, :profile, nil)}
                          avatar_class="w-10 h-10 rounded-full"
                          character={e(subject, :character, nil)}
                          show_controls={[]}
                          with_summary
                        />
                      {#else}
                        <!-- <div class="flex items-center w-10 h-10 rounded-full place-content-center bg-info/10"> -->
                          <#Icon iconify="ph:circle-duotone" class="w-7 h-7 text-primary" />
                        <!-- </div> -->
                        <div>
                          <div class="text-base font-semibold">{LiveHandler.subject_name(subject)}</div>
                          <a href={"/circle/#{id(subject)}/members"} class="link link-hover text-sm text-base-content/70">
                            {l("View circle")}
                            {#case circle_member_count(subject)}
                              {#match nil}
                              {#match count}
                                 â€¢ {count} {l("users")}
                            {/case}
                          </a>
                        </div>
                      {/if}
                      <div class="flex items-center gap-2">
                        <div>
                          <Bonfire.UI.Common.OpenModalLive
                            id={"edit_role_for_#{uid(subject)}"}
                            title_text={l("Edit role")}
                            no_actions
                            xl
                            open_btn_wrapper_class="flex flex-1 w-full"
                          >
                            <div class="mt-3">
                              <div class="font-semibold text-sm text-base-content/70 py-2 pb-4">{l("Assign a role to %{subject_name}", subject_name: LiveHandler.subject_name(subject))}</div>
                              <form id="edit_grants" :on-change="edit_grant_role">
                                <Bonfire.UI.Boundaries.TabledRolesLive
                                  id={LiveHandler.subject_name(subject)}
                                  scope={@scope}
                                  read_only
                                  selectable
                                  circle_id={subject_id}
                                  event_target={@myself}
                                  one_scope_only={false}
                                  role={Bonfire.Boundaries.Roles.role_from_grants(Map.values(grants || %{}),
                                    scope: @scope,
                                    current_user: current_user(@__context__)
                                  )
                                  |> debug("the role")}
                                  roles={Bonfire.Boundaries.Roles.roles_for_dropdown(@usage, scope: @scope, context: @__context__)}
                                />
                              </form>
                            </div>
                            <:open_btn>
                              <div data-role="toggle_role" class="btn btn-sm">
                                {Recase.to_title(
                                  to_string(
                                    Bonfire.Boundaries.Roles.role_from_grants(Map.values(grants || %{}),
                                      scope: @scope,
                                      current_user: current_user(@__context__)
                                    )
                                  )
                                )}
                                <#Icon solid="ChevronDown" class="w-4 h-4" />
                                <span class="sr-only">
                                  {l("Edit role")}
                                </span>
                              </div>
                            </:open_btn>
                          </Bonfire.UI.Common.OpenModalLive>
                        </div>
                        {#if !@read_only}
                          <span>
                            <Bonfire.UI.Common.OpenModalLive
                              id={"remove_from_acl_#{uid(subject)}"}
                              title_text={l("Remove from boundary preset")}
                              no_actions
                              open_btn_wrapper_class="flex flex-1 w-full"
                            >
                              <div class="prose prose-sm mt-2">
                                {l("Are you sure to remove %{subject_name} from '%{boundary_name}' boundary preset?",
                                  subject_name: LiveHandler.subject_name(subject),
                                  boundary_name: e(@acl, :named, :name, nil) || e(@acl, :stereotyped, :named, :name, nil)
                                )}
                              </div>
                              <button
                                data-role="remove_from_boundary_btn"
                                phx-click={JS.push("remove_from_acl",
                                  value: %{
                                    subject_id: subject_id
                                  },
                                  target: @myself
                                )}
                                class="w-full mt-3 normal-case btn btn-error"
                                type="button"
                              >
                                {l("Remove")}
                              </button>
                              <:open_btn>
                                <div data-role="remove_from_boundary_modal" class="btn-sm btn btn-square">
                                  <span class="sr-only">{l("Delete")}</span>
                                  <#Icon iconify="ph:trash-duotone" class="w-4 h-4 text-error" />
                                </div>
                              </:open_btn>
                            </Bonfire.UI.Common.OpenModalLive>
                          </span>
                        {/if}
                      </div>
                    </li>
                  </ul>
                {/if}
              </div>
            </div>
          {/if}
        </div>
      </div>
  {/case}
</div>