<div id="boundaries_acl">
  {#case e(@type, nil)}
    {#match :group}
      <section class="bg-base-content/5 rounded-lg p-4">
        <form id="edit_acl_members" class="" :on-change="select">
          <Bonfire.UI.Common.MultiselectLive
            implementation={:live_select}
            form_input_name={:add_circles_to_acl_group}
            preloaded_options={@my_circles}
            label={l("Search for circles or users to add")}
          />
        </form>
        <Bonfire.UI.Boundaries.Web.EditAclLive
          feed_by_subject={@feed_by_subject}
          setting_boundaries={@setting_boundaries}
          scope={@scope}
          usage={@usage}
          read_only={@read_only}
          myself={@myself}
        />
      </section>
    {#match nil}
      <div>
        <div
          :if={!@setting_boundaries && e(@acl, :extra_info, :summary, nil)}
          class="p-4 border-b border-base-content/10"
        >
          <span class="text-base-content/70">
            {e(@acl, :extra_info, :summary, "No description provided for this boundary preset.")}
          </span>
        </div>
        <div class="">
          {#if @section == "new_circle"}
            <Bonfire.UI.Boundaries.Web.NewCircleLive
              parent_back={@myself}
              event_target={@myself}
              setting_boundaries={@setting_boundaries}
            />
          {#elseif @edit_circle_id}
            <Bonfire.UI.Boundaries.Web.CircleLive
              id={@edit_circle_id}
              circle_id={@edit_circle_id}
              parent_back={@myself}
              setting_boundaries={@setting_boundaries}
            />
          {#else}
            <div class="p-3 bg-base-100 w-full border-base-content/10 border-b" :if={!@read_only}>
              <div class="text-sm mb-2 text-base-content/80 font-medium">{l("Add one or more circles to this boundary")}</div>
              <form
                id="edit_acl_members"
                class="flex items-center gap-2 w-full flex-1 flex-wrap"
                phx-change="multi_select"
              >
                <!-- <Bonfire.UI.Common.MultiselectLive
                  implementation={:live_select}
                  form_input_name={:add_circles_to_acl}
                  preloaded_options={@my_circles}
                  label={l("Search for circles or users to add")}
                /> -->
                <button
                  disabled={Enum.any?(@feed_by_subject, fn {id, _} -> id == elem(circle, 1)[:id] end)}
                  class="btn btn-outline rounded-full"
                  :for={circle <- @my_circles}
                  type="button"
                  phx-target={@myself}
                  phx-click="add_to_acl"
                  phx-value-id={elem(circle, 1)[:id]}
                >
                  {elem(circle, 1)[:name]}
                </button>
              </form>
              {#if !@setting_boundaries and !@read_only and !Acls.is_object_custom?(@acl)}
              {/if}
            </div>

            <div date-role="edit-acl">
              <div class="">
                {#if is_list(@feed_by_subject) or (is_map(@feed_by_subject) and not Enum.empty?(@feed_by_subject))}
                  <form id="edit_grants" :on-change="edit_grant_role">
                    <ul class="flex flex-col divide-y divide-base-content/10">
                      <li
                        x-data="{open: false}"
                        :for={{{subject_id, %{subject: subject, grants: grants} = _subject_verb_grants}, _i} <-
                          Enum.with_index(@feed_by_subject || [])}
                        class="flex flex-col"
                      >
                        <div class="flex items-center justify-between p-4">
                          {#if e(subject, :profile, :id, nil)}
                            <StatelessComponent
                              module={maybe_component(Bonfire.UI.Me.ProfileItemLive)}
                              profile={e(subject, :profile, nil)}
                              avatar_class="w-10 h-10 rounded-full"
                              character={e(subject, :character, nil)}
                              show_controls={[]}
                              with_summary
                            />
                          {#else}
                            <div class="flex items-center gap-3">
                              <span class="flex items-center w-10 h-10 rounded-full place-content-center bg-info/10">
                                <#Icon iconify="pajamas:group" class="inline-block w-5 h-5 text-base-content" />
                              </span>
                              <div class="flex flex-col">
                                <div class="text-base truncate max-w-[160px] font-semibold text-base-content">{LiveHandler.subject_name(subject)}</div>
                                <!-- <div class="text-sm truncate max-w-[160px] text-base-content/70">{LiveHandler.subject_summary(subject)}</div> -->
                              </div>
                            </div>
                          {/if}

                          <div class="flex items-center gap-2">
                            <button x-on:click="open = !open" type="button" x-cloak class="btn btn-neutral btn-sm">
                              {Recase.to_title(
                                to_string(
                                  Bonfire.Boundaries.Roles.role_from_grants(Map.values(grants || %{}),
                                    scope: @scope,
                                    current_user: current_user(@__context__)
                                  )
                                )
                              )}
                            </button>
                            {#if !@read_only}
                              <span>
                                <Bonfire.UI.Common.OpenModalLive
                                  id={"remove_from_acl_#{uid(subject)}"}
                                  title_text={l("Remove from boundary preset")}
                                  no_actions
                                  open_btn_wrapper_class="flex flex-1 w-full"
                                >
                                  <div class="prose prose-sm mt-2">
                                    {l("Are you sure to remove %{subject_name} from '%{boundary_name}' boundary preset?",
                                      subject_name: LiveHandler.subject_name(subject),
                                      boundary_name: e(@acl, :named, :name, nil) || e(@acl, :stereotyped, :named, :name, nil)
                                    )}
                                  </div>
                                  <button
                                    data-role="remove_from_boundary_btn"
                                    phx-click={JS.push("remove_from_acl",
                                      value: %{
                                        subject_id: subject_id
                                      },
                                      target: @myself
                                    )}
                                    class="w-full mt-3 normal-case btn btn-error"
                                    type="button"
                                  >
                                    {l("Remove")}
                                  </button>
                                  <:open_btn>
                                    <div data-role="remove_from_boundary_modal" class="btn-outline btn-xs btn btn-circle">
                                      <#Icon iconify="ic:baseline-minus" class="w-4 h-4" />
                                    </div>
                                  </:open_btn>
                                </Bonfire.UI.Common.OpenModalLive>
                              </span>
                            {/if}
                          </div>
                        </div>
                        <div x-show="open" x-cloak x-collapse class="mt-0 m-3 p-3 rounded-lg shadow bg-base-content/5">
                          <div class="font-semibold text-sm text-base-content/70 py-2 pb-4">{l("Assign a role to %{subject_name}", subject_name: LiveHandler.subject_name(subject))}</div>
                          <Bonfire.UI.Boundaries.Web.TabledRolesLive
                            id={LiveHandler.subject_name(subject)}
                            scope={@scope}
                            read_only
                            selectable
                            circle_id={subject_id}
                            event_target={@myself}
                            role={Bonfire.Boundaries.Roles.role_from_grants(Map.values(grants || %{}),
                              scope: @scope,
                              current_user: current_user(@__context__)
                            )
                            |> debug("the role")}
                            roles={Bonfire.Boundaries.Roles.roles_for_dropdown(@usage, scope: @scope, context: @__context__)}
                          />
                          <!-- roles={Bonfire.Boundaries.Roles.roles_for_dropdown(@usage, scope: @scope, context: @__context__)} -->
                        </div>
                      </li>
                    </ul>
                  </form>
                {/if}
              </div>
            </div>
          {/if}
        </div>
      </div>
  {/case}
</div>