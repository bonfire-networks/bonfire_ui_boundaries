<form id="edit_grants" :on-change="edit_grant_role">
  <ul class="flex flex-col divide-y divide-base-content/10">
    <li
      :for={{{subject_id, %{subject: subject, grants: grants} = _subject_verb_grants}, _i} <-
        Enum.with_index(@feed_by_subject || [])}
      class="flex items-center justify-between p-4"
    >
      {#if e(subject, :profile, :id, nil)}
        <StatelessComponent
          module={maybe_component(Bonfire.UI.Me.ProfileItemLive)}
          profile={e(subject, :profile, nil)}
          avatar_class="w-10 h-10 rounded-full"
          character={e(subject, :character, nil)}
          show_controls={[]}
          with_summary
        />
      {#else}
        <div class="flex items-center gap-3">
          <span class="flex items-center w-10 h-10 rounded-full place-content-center bg-info">
            <#Icon iconify="pajamas:group" class="inline-block w-5 h-5 text-info-content" />
          </span>
          <div class="text-sm truncate max-w-[160px] font-medium text-base-content">{LiveHandler.subject_name(subject)}</div>
        </div>
      {/if}

      <div class="flex items-center gap-2">
        {#if !@read_only}
          <Bonfire.UI.Boundaries.Web.RolesDropdownLive
            circle_id={subject_id}
            scope={@scope}
            usage={@usage}
            setting_boundaries={@setting_boundaries}
            role={Bonfire.Boundaries.Roles.role_from_grants(Map.values(grants || %{}),
              scope: @scope,
              current_user: current_user(@__context__)
            )
            |> debug("the role")}
            extra_roles={[{:custom, l("Custom")}]}
            no_actions
          />
          <div class="dropdown dropdown-end">
            <label tabindex="0" class="rounded btn btn-square btn-ghost btn-sm">
              <#Icon solid="DotsVertical" class="w-4 h-4" />
            </label>
            <ul tabindex="0" class="w-48 p-1 rounded shadow dropdown-content menu menu-compact bg-base-200">
              {!-- <li :if={!@setting_boundaries}>
            <Bonfire.UI.Boundaries.Web.AclModalLive
              subject_id={subject_id}
              role_title={Bonfire.Boundaries.Verbs.role_from_verb_ids(Map.keys(grants || %{}))}
              grants={grants}
              verbs={@verbs}
              myself={@myself}
            />
          </li> --}
              <li data-role="remove_from_boundary">
                <Bonfire.UI.Common.OpenModalLive
                  id={"remove_from_acl_#{uid(subject)}"}
                  title_text={l("Remove from boundary preset")}
                  no_actions
                  open_btn_wrapper_class="flex flex-1 w-full"
                >
                  <div class="prose prose-sm mt-2">
                    {l("Are you sure to remove %{subject_name} from the '%{boundary_name}' boundary preset?",
                      subject_name: LiveHandler.subject_name(subject),
                      boundary_name: e(@acl, :named, :name, nil) || e(@acl, :stereotyped, :named, :name, nil)
                    )}
                  </div>
                  <button
                    data-role="remove_from_boundary_btn"
                    phx-click={JS.push("remove_from_acl",
                      value: %{
                        subject_id: subject_id
                      },
                      target: @myself
                    )}
                    class="w-full mt-3 normal-case btn btn-error"
                    type="button"
                  >
                    {l("Remove")}
                  </button>
                  <:open_btn>
                    <div data-role="remove_from_boundary_modal" class="text-base-content">{l("Remove")}</div>
                  </:open_btn>
                </Bonfire.UI.Common.OpenModalLive>
              </li>
            </ul>
          </div>
        {#else}
          <button type="disabled" disabled class="btn btn-disabled btn-sm">
            {Bonfire.Boundaries.Roles.role_from_grants(Map.values(grants || %{}),
              scope: @scope,
              current_user: current_user(@__context__),
              fallback_to_list: true
            )}
          </button>
        {/if}
      </div>
    </li>
  </ul>
</form>