<div class="relative overflow-y-visible overflow-x-auto">
      {#if Enum.count(@roles_with_verbs) > 0}
  <table class="table table-zebra">
    <thead class="text-xs uppercase sticky top-0 z-10 bg-base-100">
      <tr>
        <th class="sticky left-0 z-20 bg-base-100/70 backdrop-blur-sm">Role</th>
        <th class="font-medium" :for={verb <- @verb_order}>{verb}</th>
        <th class="sticky right-0 z-20 bg-base-100/70 backdrop-blur-sm"></th>
      </tr>
    </thead>
    <tbody>
        <tr :for={{role, verbs} <- @roles_with_verbs}>
          <td class="sticky left-0 z-10 bg-base-100/70 backdrop-blur-sm min-w-[160px] max-w-[180px] truncate ellipsis">
            {Recase.to_title(to_string(role))}
          </td>
        {#if e(assigns, :read_only, true)}
          <td :for={{verb, status} <- verbs}>
            {#case status}
              {#match :can}
                <#Icon iconify="carbon:checkmark-filled" class="text-success text-center mx-auto w-5 h-5" />
              {#match :cannot}
                <#Icon iconify="bx:block" class="text-error text-center mx-auto w-5 h-5" />
              {#match _}
                <#Icon iconify="heroicons-solid:minus" class="text-base-content/30 w-5 h-5 text-center mx-auto" />
            {/case}
          </td>
        {#else}
          <td :for={{verb, status} <- verbs}>
            <form :on-change="edit_verb_value" phx-target={@myself}>
              <select class="select select-bordered select-xs" name={"role[#{role}][#{verb}]"}>
                <option selected={status == :can} value="1">Can</option>
                <option selected={status == :cannot} value="0">Cannot</option>
                <option selected={status == nil} value="">Undefined</option>
              </select>
            </form>
          </td>
        {/if}
        <td class="sticky right-0 z-10 bg-base-100/70 backdrop-blur-sm flex items-center gap-2 justify-end pr-0">
          <Bonfire.UI.Common.OpenModalLive id={"edit_role_#{role}"} title_text={l("Edit Role")}>
            <div>
            {l(
              "The topic will be permanently archived, so that new things can no longer be published in it. People who already follow this topic will still be able to access it."
            )}
              <button class="btn btn-sm btn-circle btn-outline" phx-click="Bonfire.Boundaries:role_edit_details" phx-value-old_name={role}>
                <#Icon iconify="ph:gear-fill" class="w-4 h-4 opacity-80" />
                <span class="sr-only">{l("Edit Role")}</span>
              </button>
              </div>
            <:open_btn>
              <button class="btn btn-sm btn-circle btn-outline">
                <#Icon iconify="ph:gear-fill" class="w-4 h-4 opacity-80" />
                <span class="sr-only">{l("Edit Role")}</span>
              </button>
            </:open_btn>
          </Bonfire.UI.Common.OpenModalLive>
        </td>
      </tr>
    </tbody>
  </table>
      {#else}
      <Bonfire.UI.Common.EmptyFeed
        feedback_title={l("There are not roles yet")}
        feedback_message={l("Add some roles to get started!")}
        />
      {/if}

  <!-- 

{#if !e(assigns, :mini, false)}
  <li class="flex items-center justify-between gap-8 p-3">
    <Bonfire.UI.Boundaries.Web.YesMaybeFalseLive
      value={@value}
      read_only={@read_only}
      event_target={@event_target}
      id={"role_#{@name}_#{Enums.maybe_elem(@verb, 0) || @verb}"}
      field_name={"role[#{@name}][#{Enums.maybe_elem(@verb, 0) || @verb}]"}
    />
  </li>
{#else}
  {#case Bonfire.Boundaries.Verbs.get(@verb, @all_verbs)}
    {#match nil}
      <li
        title={e(@verb, :summary, nil)}
        class={
          "badge",
          "badge-success": @value,
          "badge-error": !@value
        }
      >
        {@verb}
      </li>
    {#match verb}
      <li
        title={e(verb, :summary, nil)}
        class={
          "badge",
          "badge-success": @value,
          "badge-error": !@value
        }
      >
        {e(verb, :verb, nil) || verb}
      </li>
  {/case}
{/if} -->
</div>