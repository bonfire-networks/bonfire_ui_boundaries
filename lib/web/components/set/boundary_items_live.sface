<div class="flex flex-1 flex-col flex-wrap">
  <div :for={{data, role} <- @circles || []} class="flex py-2 items-center w-full justify-between">
    {#case debug(data, "idata")}
      {#match %{profile: profile, character: character} when not is_nil(profile)}
        <StatelessComponent
          module={maybe_component(Bonfire.UI.Me.ProfileItemLive)}
          avatar_class="w-9 h-9 rounded-full"
          profile={profile}
          character={character}
          show_controls={[]}
        />
      {#match %{"icon" => _}}
        <StatelessComponent
          module={maybe_component(Bonfire.UI.Me.ProfileItemLive)}
          avatar_class="w-9 h-9 rounded-full"
          profile={data}
          character={data}
          show_controls={[]}
        />
      {#match _ when is_binary(data)}
        <div class="flex items-center gap-3 grow">
          <span class="w-9 h-9 rounded-full bg-info/10 flex items-center place-content-center">
            <#Icon iconify="rivet-icons:circle" class="inline-block w-5 h-5 text-base-content/70" />
          </span>
          <div class="text-base font-medium text-base-content truncate max-w-[210px]">{name(data, @my_circles)}</div>
        </div>
      {#match _}
        <div class="flex items-center gap-3 grow">
          <span class="w-9 h-9 rounded-full bg-info/10 flex items-center place-content-center">
            <#Icon iconify="rivet-icons:circle" class="inline-block w-5 h-5 text-base-content/70" />
          </span>
          <div class="text-base font-medium text-base-content truncate max-w-[210px]">{name(data) ||
              l("Unknown circle or user")}</div>
        </div>
    {/case}
    <div class="items-center flex gap-2">
      <div class="flex items-center gap-2">
        {#if @read_only}
          {role}
        {#else}
          <Bonfire.UI.Boundaries.RolesDropdownLive
            setting_boundaries
            circle_id={id(data)}
            role={role}
            roles={@roles_for_dropdown}
            field={@field}
          />
        {/if}
        <!-- <Bonfire.UI.Common.OpenModalLive
          reusable_modal_id={if @__context__[:sticky], do: "persistent_modal"}
          id={"explain_role#{id(data)}"}
          title_text={l("Role details")}
          no_actions
          open_btn_wrapper_class="flex flex-1 w-full"
        >
          <div class="border border-base-content/10 mt-4 rounded-box">
            <Bonfire.UI.Boundaries.YourRoleLive
              is_caretaker={nil}
              role_permissions={acls_from_role(role)}
              role_name={role}
              label={l("")}
              scope={:preview}
            />
          </div>

          <:open_btn>
            <div class="btn btn-sm btn-circle btn-ghost" aria-label="Add description">
              <#Icon iconify="heroicons-outline:information-circle" class="w-4 h-4 text-base-content/70" />
            </div>
          </:open_btn>
        </Bonfire.UI.Common.OpenModalLive> -->
      </div>

      <div
        :if={!@read_only}
        phx-click={JS.push("Bonfire.Boundaries:remove_circle",
          value: %{
            id: id(data),
            field: @field,
            name: name(data)
          },
          target: "#smart_input"
        )}
        class="btn btn-xs btn-circle btn-ghost"
      >
        <#Icon iconify="ic:baseline-minus" class="w-4 h-4" />
      </div>
    </div>
  </div>
</div>
