<div class="flex flex-1 flex-col flex-wrap">
  <!-- filter the @circles with this logic =
      Enum.filter(circles, fn
        {_circle_id, role} -> to_string(role) in roles_for_dropdown
        _other -> false # Ignore items that are not 2-element tuples
      end)
 -->
  <div
    :for={{data, role} <- filter_circles(@circles || [], @roles_for_dropdown)}
    class="flex py-2 items-start gap-3 w-full justify-between border-b border-base-content/10 pb-4"
  >
    {#case debug(data, "idata")}
      {#match %{profile: profile, character: character} when not is_nil(profile)}
        <StatelessComponent
          module={maybe_component(Bonfire.UI.Me.ProfileItemLive)}
          avatar_class="w-9 h-9 rounded-full"
          profile={profile}
          character={character}
          show_controls={[]}
        />
      {#match %{"icon" => _}}
        <StatelessComponent
          module={maybe_component(Bonfire.UI.Me.ProfileItemLive)}
          avatar_class="w-9 h-9 rounded-full"
          profile={data}
          character={data}
          show_controls={[]}
        />
      {#match _ when is_binary(data)}
        <div class="flex items-start gap-2 grow">
          <#Icon iconify="ph:circle-duotone" class="shrink-0 w-6 h-6 text-primary" />

          <div class="flex flex-col">
            <div class="text-sm font-medium text-base-content truncate max-w-[210px]">{name(data, @my_circles)}</div>
            <!-- Dynamic list of verbs enabled/disabled by the role -->
            <div class="text-xs text-base-content/70">
              {#case verbs_text_for_role(role)}
                {#match ""}
                  <!-- No permissions to display -->
                {#match text}
                  {l("They")}
                  {#for part <- String.split(text, ~r/\b(can|cannot)\b/, include_captures: true)}
                    {#case part}
                      {#match "can"}
                        <span class="">can</span>
                      {#match "cannot"}
                        <span class="">cannot</span>
                      {#match verb_text when verb_text != ""}
                        <span class="font-medium text-primary">{verb_text}</span>
                      {#match ""}
                        <!-- Skip empty strings -->
                    {/case}
                  {/for}.
              {/case}
            </div>
          </div>
        </div>
      {#match _}
        <div class="flex items-start gap-2 grow">
          <#Icon iconify="ph:circle-duotone" class="shrink-0 w-6 h-6 text-primary" />

          <div class="flex flex-col">
            <div class="text-sm font-medium text-base-content truncate max-w-[210px]">{name(data) ||
                l("Unknown circle or user")}</div>
            <div class="text-xs text-base-content/70">
              {#case verbs_text_for_role(role)}
                {#match ""}
                  <!-- No permissions to display -->
                {#match text}
                  {l("They")}
                  {#for part <- String.split(text, ~r/\b(can|cannot)\b/, include_captures: true)}
                    {#case part}
                      {#match "can"}
                        <span class="">can</span>
                      {#match "cannot"}
                        <span class="">cannot</span>
                      {#match verb_text when verb_text != ""}
                        <span class="font-medium text-primary">{verb_text}</span>
                      {#match ""}
                        <!-- Skip empty strings -->
                    {/case}
                  {/for}.
              {/case}
            </div>
          </div>
        </div>
    {/case}
    <div class="items-center flex gap-2">
      <div class="flex items-center gap-2 flex-1 lg:flex-auto">
        {#if @read_only}
          {role}
        {#else}
          <Bonfire.UI.Boundaries.RolesDropdownLive
            setting_boundaries
            circle_id={id(data)}
            role={role}
            roles={@roles_for_dropdown}
            field={@field}
          />
        {/if}
      </div>
      <div
        :if={!@read_only}
        phx-click={JS.push("Bonfire.Boundaries:remove_circle",
          value: %{
            id: id(data),
            field: @field,
            name: name(data)
          },
          target: "#smart_input"
        )}
        class="btn btn-sm btn-circle btn-ghost"
      >
        <#Icon iconify="ph:trash-duotone" class="w-4 h-4 text-error" />
      </div>
    </div>
  </div>
</div>
