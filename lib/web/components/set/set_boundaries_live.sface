<div>
  <!-- DEBUG: is_caretaker={@is_caretaker}, my_circles count={length(@my_circles || [])} -->
  <div
    :if={@is_caretaker}
    class="w-full h-full multiselect_in_composer gap-4 mt-3  flex flex-col flex-1 grow"
  >
    <section class="mt-2">
      <div class="flex items-center justify-between gap-4">
        <div :if={!@acl_mode} class="flex flex-col gap-1">
          <div class="text-xs uppercase text-base-content/80 font-medium">{l("Advanced permissions")}</div>
          <div class="text-xs font-light text-base-content/70">{l("Further customize who can see and interact with your activity")}</div>
        </div>
      </div>

      <div class="mt-3">
        <form
          id="add_members_to_acl"
          phx-change="multi_select"
          phx-target={"##{@parent_id || "customize_boundary_live"}"}
          class="w-full flex-1"
        >
          <label
            for="multi_select_Elixir.Bonfire.UI.Boundaries.CustomizeBoundaryLive_text_input"
            class="sr-only"
          >{l("Search for users to add")}</label>
          <div class="relative">
            <Bonfire.UI.Common.MultiselectLive
              implementation={:live_select}
              mode={:tags}
              form_input_name="Elixir.Bonfire.UI.Boundaries.CustomizeBoundaryLive"
              field={:add_to_circles}
              show_search
              debounce={300}
              event_target={"##{@parent_id || "customize_boundary_live"}"}
              label={l("search for someone to define permissions for them")}
              selected_options={Bonfire.UI.Boundaries.SetBoundariesLive.selected_users_for_tags(@selected_users || [])}
            />
          </div>
        </form>
      </div>

      <div class="pt-2">
        <div class="flex h-full flex-1 mt-3 flex-col gap-2">
          {#for verb <- e(@available_verbs, [])}
            <div x-data="{open: false}">
              <div class="flex items-start gap-4">
                <div
                  iconify={e(verb, :icon, "ph:circle-duotone")}
                  class="w-6 h-6 text-primary"
                  aria-hidden="true"
                />
                <div class="border-b border-base-content/10 flex-1 pb-2">
                  <div x-on:click="open = !open" class="flex items-center justify-between gap-4 flex-1">
                    <div class="flex flex-col flex-1">
                      <div class="text-sm font-medium text-base-content">{e(verb, :name, "")}</div>
                      <div class="text-xs text-base-content/70">{e(verb, :summary, "")}</div>
                    </div>
                    <#Icon iconify="ph:caret-down" class="w-4 h-4 text-base-content/70" />
                  </div>
                  <div x-show="open" x-cloak x-collapse class="pt-2 space-y-2">
                    {#for item <- (@my_circles || []) ++ (@selected_users || [])}
                      <div class="flex items-center justify-between">
                        <div class="flex items-center gap-3">
                          {#case e(item, :user_type, nil)}
                            {#match "permission_entry"}
                              <!-- Render user -->
                              <div class="w-7 h-7 rounded-full bg-primary/10 flex items-center justify-center">
                                <#Icon iconify="ph:user-duotone" class="w-4 h-4 text-primary" />
                              </div>
                              <div class="flex flex-col">
                                <span class="text-sm text-base-content">{e(item, :name, "Unnamed User")}</span>
                                {#if e(item, :character, :username, nil)}
                                  <span class="text-xs text-base-content/60">@{e(item, :character, :username, nil)}</span>
                                {/if}
                              </div>
                            {#match _}
                              <!-- Render circle -->
                              <#Icon iconify="ph:circle-duotone" class="w-7 h-7 text-primary" />
                              <span class="text-sm text-base-content">{e(item, :named, :name, nil) || e(item, :stereotyped, :named, :name, nil) ||
                                  e(item, :name, nil)}</span>
                          {/case}
                        </div>
                        <!-- test - {inspect(@verb_permissions)}
                        test - {inspect(e(verb, :slug, ""))}
                        test - {inspect(id(item))} -->
                        <Bonfire.UI.Boundaries.YesMaybeFalseLive
                          id={"#{e(verb, :slug, "")}_#{id(item)}"}
                          field_name={"verbs[#{e(verb, :slug, "")}][#{id(item)}]"}
                          verb={to_string(e(verb, :slug, ""))}
                          role={id(item)}
                          value={Bonfire.UI.Boundaries.SetBoundariesLive.get_verb_value_for_display(
                            @verb_permissions,
                            e(verb, :slug, ""),
                            id(item)
                          )}
                          read_only={false}
                          event_target={"##{@parent_id || "customize_boundary_live"}"}
                        />
                      </div>
                    {/for}
                  </div>
                </div>
              </div>
            </div>
          {/for}
        </div>
      </div>
    </section>
  </div>
</div>