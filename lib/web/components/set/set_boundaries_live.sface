<div :if={@is_caretaker} class="w-full h-full multiselect_in_composer flex-1 grow">
  {!-- <#Icon
    iconify="carbon:subnet-acl-rules"
    class="w-5 h-5 mx-1 mt-2 shrink-0 text-base-content/70"
  /> --}

  <!-- Tabs -->
  <div
    id="main"
    x-data="{
        selectedId: null,
        init() {
            // Set the first available tab on the page on page load.
            this.$nextTick(() => this.select('tab_1'))
        },
        select(id) {
            this.selectedId = id
        },
        isSelected(id) {
            return this.selectedId === id
        },
        whichChild(el, parent) {
            return Array.from(parent.children).indexOf(el) + 1
        }
    }"
    x-id="['tab']"
    class="p-2"
  >
    <!-- Tab List -->
    <ul
      x-ref="tablist"
      @keydown.right.prevent.stop="$focus.wrap().next()"
      @keydown.home.prevent.stop="$focus.first()"
      @keydown.page-up.prevent.stop="$focus.first()"
      @keydown.left.prevent.stop="$focus.wrap().prev()"
      @keydown.end.prevent.stop="$focus.last()"
      @keydown.page-down.prevent.stop="$focus.last()"
      role="tablist"
      class="-mb-px mt-3 flex items-stretch"
    >
      <!-- Tab -->
      <li>
        <button
          id="tab_1"
          @click="select($el.id)"
          @mousedown.prevent
          @focus="select($el.id)"
          type="button"
          :tabindex="isSelected($el.id) ? 0 : -1"
          :aria-selected="isSelected($el.id)"
          :class="isSelected($el.id) ? 'border-base-content/30 bg-base-100' : 'border-transparent'"
          class="inline-flex rounded-t-md border-t border-l border-r px-5 py-2.5 text-sm"
          role="tab"
        >{l("Grant permissions")}</button>
      </li>

      <li>
        <button
          id="tab_2"
          @click="select($el.id)"
          @mousedown.prevent
          @focus="select($el.id)"
          type="button"
          :tabindex="isSelected($el.id) ? 0 : -1"
          :aria-selected="isSelected($el.id)"
          :class="isSelected($el.id) ? 'border-base-content/30 bg-base-100' : 'border-transparent'"
          class="inline-flex rounded-t-md border-t border-l border-r px-5 py-2.5 text-sm"
          role="tab"
        >{l("Revoke permissions")}</button>
      </li>
    </ul>

    <!-- Panels -->
    <!-- set_boundaries min-h-[320px] h-[360px] px-2 pt-2 flex flex-col relative h-full overflow-y-auto flex-nowrap flex-1 -->
    <div role="tabpanels" class="rounded-b-md border border-base-content/30 bg-base-100">
      <!-- Panel -->
      <section x-show="isSelected('tab_1')" :aria-labelledby="tab_1" role="tabpanel" class="p-2">
        <div>
          <Bonfire.UI.Common.MultiselectLive
            :if={!@read_only}
            implementation={:live_select}
            field={:exclude_circles}
            form_input_name={__MODULE__}
            preloaded_options={results_for_multiselect(@my_circles)}
            label={l("Add circles or people")}
          />
          <div class="flex h-full flex-1 flex-col gap-2">
            <div class="mt-4 flex justify-between items-center">
              <StatelessComponent
                module={maybe_component(Bonfire.UI.Me.ProfileItemLive)}
                avatar_class="w-9 h-9 rounded-full"
                wrapper_class="flex items-center justify-between"
                profile={e(current_user(@__context__), :profile, nil)}
                character={e(current_user(@__context__), :character, nil)}
                show_controls={[]}
              />
              <div class="btn btn-sm btn-disabled  normal-case">{l("Caretaker")}</div>
            </div>
            {#if @to_circles && @to_circles != []}
              <Bonfire.UI.Boundaries.Web.BoundaryItemsLive
                read_only={@read_only}
                to_boundaries={[]}
                circles={@to_circles}
                roles_for_dropdown={@roles_for_dropdown
                |> Enum.reject(fn
                  {"cannot_" <> _, _} -> true
                  {key, _} -> String.starts_with?(to_string(key), "cannot_")
                end)}
              />
            {#else}
              <div class="p-12 flex flex-col place-content-center items-center gap-3 text-center font-medium text-base-content/70 bg-base-content/5">
                <span>
                  <#Icon iconify="streamline:ok-hand-solid" class="w-12 h-12 text-base-content/70" />
                </span>
                <span>{l(
                    "You can grant more permissions to users or circles if you want them to have more interactions with your activity"
                  )}</span>
              </div>
            {/if}
          </div>
        </div>
      </section>

      <section
        :if={!@read_only or (is_list(@exclude_circles) and @exclude_circles != [])}
        x-show="isSelected('tab_2')"
        :aria-labelledby="tab_2"
        role="tabpanel"
        class="p-2"
      >
        <div class="">
          <Bonfire.UI.Common.MultiselectLive
            :if={!@read_only}
            implementation={:live_select}
            field={:exclude_circles}
            form_input_name={Bonfire.Boundaries.Web.ExcludeBoundaries}
            preloaded_options={results_for_multiselect(@my_circles, :exclude_circles)}
            label={l("Select or search for circles or people to exclude")}
          />
          <div class="mt-4 flex justify-between items-center">
            <StatelessComponent
              module={maybe_component(Bonfire.UI.Me.ProfileItemLive)}
              avatar_class="w-9 h-9 rounded-full"
              wrapper_class="flex items-center justify-between"
              profile={e(current_user(@__context__), :profile, nil)}
              character={e(current_user(@__context__), :character, nil)}
              show_controls={[]}
            />
            <div class="btn btn-sm btn-disabled  normal-case">{l("Caretaker")}</div>
          </div>
          {#if @exclude_circles && @exclude_circles != []}
            <Bonfire.UI.Boundaries.Web.BoundaryItemsLive
              read_only={@read_only}
              to_boundaries={[]}
              circles={@exclude_circles}
              field={:exclude_circles}
              roles_for_dropdown={@roles_for_dropdown
              |> Enum.filter(fn
                {"cannot_" <> _, _} -> true
                {key, _} -> String.starts_with?(to_string(key), "cannot_")
              end)}
            />
          {#else}
            <div class="mt-2 p-12 flex flex-col place-content-center items-center gap-3 text-center font-medium text-base-content/70 bg-base-content/5">
              <span>
                <#Icon iconify="ph:hand-fill" class="w-12 h-12 text-base-content/70" />
              </span>
              <span>{l(
                  "You can remove permissions to users or circles if you dont want them to interact with your activity"
                )}</span>
            </div>
          {/if}
        </div>
      </section>
    </div>
  </div>

  <Bonfire.UI.Boundaries.Web.BoundaryComposerActionsLive :if={@showing_within in [:smart_input, :page] && @is_caretaker} />
</div>